#
# -*- coding: utf-8 -*-
# Python Settings
# 
# by Drew Wingfield
#
# Copyright (C) 2024, Drew Wingfield
#
# This script is part of EDrewcated Guesser by Drew Wingfield.
# EDrewcated Guesser is free software: you can redistribute it and/or modify it under 
# the terms of the AGNU Affero General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# EDrewcated Guesser is distributed in the hope that it will be useful, but WITHOUT ANY 
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
# PURPOSE. See the AGNU Affero General Public License for more details.
#
# You should have received a copy of the AGNU Affero General Public License along with 
# EDrewcated Guesser. If not, see <https://www.gnu.org/licenses/>.
#
# See the documentation in the README.md file.
#
"""
Provides a PythonSettings class, allowing globalization of variables across scripts.

See the documentation in the README.md file.

Copyright (C) 2024, Drew Wingfield

This script is part of EDrewcated Guesser by Drew Wingfield.
EDrewcated Guesser is free software: you can redistribute it and/or modify it under 
the terms of the AGNU Affero General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later version.

EDrewcated Guesser is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE. See the AGNU Affero General Public License for more details.

You should have received a copy of the AGNU Affero General Public License along with 
EDrewcated Guesser. If not, see <https://www.gnu.org/licenses/>.

Reads from settings.config file, generated by init_settings.py
"""


if __name__ == "__main__":
    print("python_settings.py should not be called as main!")


#import pathlib
import os

def get_var_value(line: str):
    return line[line.index("=")+1:-1]


class PythonSettings():
    def __init__(self):
        self.path_to_ftcapi = None
        self.debug_level = None
        self.event_code = None
        self.field_mode = None

        dir_path = str(os.path.dirname(os.path.realpath(__file__)))
        settings_path = os.path.join(dir_path,"generatedfiles","settings.config")
        
        # gather the settings from the settings.config file
        with open(settings_path,"r") as thefile:
            for line in thefile.readlines():
                if "path_to_ftcapi" in line:
                    self.path_to_ftcapi = get_var_value(line)
                
                if "event_code" in line:
                    self.event_code = get_var_value(line)
                
                if "debug_level" in line:
                    self.debug_level = int(get_var_value(line))
                
                if "field_mode" in line:
                    self.field_mode = bool(get_var_value(line))
        


        if (self.path_to_ftcapi == None or self.debug_level == None or self.event_code == None or self.field_mode == None):
            raise Warning("Some settings variable not found in settings.config! "+
                          f"path_to_ftcapi={self.path_to_ftcapi}  "+
                          f"debug_level={self.debug_level}  "+
                          f"event_code={self.event_code}  "+
                          f"field_mode={self.field_mode}"
                          )
        

if __name__ == "__main__":
    settings = PythonSettings()
    print(settings.debug_level)
    print(settings.event_code)
    print(settings.path_to_ftcapi)